// <auto-generated />
using System;
using Excellerent.SharedInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Excellerent.SharedInfrastructure.Data.Migrations
{
    [DbContext(typeof(EPPContext))]
    [Migration("20211215131906_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Applicant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUpload")
                        .HasColumnType("text");

                    b.Property<string>("ResumeUpload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LuPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("MonthOfExpierence")
                        .HasColumnType("integer");

                    b.Property<string>("OtherSkillSet")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionToApplyID")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimarySkillSetID")
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyLevelID")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondarySkillSetID")
                        .HasColumnType("text");

                    b.Property<int>("YearsOfExpierence")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LuPositionToApplyGuid");

                    b.HasIndex("ProficiencyLevelID");

                    b.ToTable("ApplicantAreaOfInterest");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationProgrammeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherFieldOfStudy")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EducationProgrammeId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.JobRequirment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobBrief")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionName")
                        .HasColumnType("text");

                    b.Property<string>("JobResponsiblity")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("JobRequirment");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EducationProgrammes");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("FieldOfStudie");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LUPositionToApplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LUSkillSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LUPositionToApplyId");

                    b.HasIndex("LUSkillSetId");

                    b.ToTable("LUPositionSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("PositionToApply");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OtherSkillSet")
                        .HasColumnType("integer");

                    b.Property<int>("PositionToApplyID")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<int>("SecondarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("luPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("skillSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("luPositionToApplyGuid");

                    b.HasIndex("skillSetGuid");

                    b.ToTable("SkillPositionAssociation");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Affliation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesPersonGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientStatusGuid");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("OperatingAddresses");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResource", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectGuid");

                    b.ToTable("AssignResources");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerAssigned")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SupervisorGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientGuid");

                    b.HasIndex("ProjectStatusGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowResource")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DeviceDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocateTo")
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceClassificationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsWorking")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purchaser")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Warranty")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("CountryId");

                    b.ToTable("DutyBranches");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EmergencyAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("email2")
                        .HasColumnType("text");

                    b.Property<string>("email3")
                        .HasColumnType("text");

                    b.Property<string>("houseNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber3")
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .HasColumnType("text");

                    b.Property<string>("stateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("subCityZone")
                        .HasColumnType("text");

                    b.Property<string>("woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("EmergencyContactsModel");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrandfatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail3")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaynEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DutyBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.HasIndex("BranchGuid");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Relationship", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimesheetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("TimesheetGuid");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.Property<Guid>("TimesheetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TimesheetId", "ProjectId");

                    b.ToTable("TimesheetAprovals");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "ApplicantInfo")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LuPositionToApply")
                        .WithMany()
                        .HasForeignKey("LuPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", "ProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("ProficiencyLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantInfo");

                    b.Navigation("LuPositionToApply");

                    b.Navigation("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", "EducationProgramme")
                        .WithMany()
                        .HasForeignKey("EducationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId");

                    b.Navigation("Applicant");

                    b.Navigation("EducationProgramme");

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LUPositionToApply")
                        .WithMany()
                        .HasForeignKey("LUPositionToApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "LUSkillSet")
                        .WithMany()
                        .HasForeignKey("LUSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LUPositionToApply");

                    b.Navigation("LUSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "luPositionToApply")
                        .WithMany()
                        .HasForeignKey("luPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "skillSet")
                        .WithMany()
                        .HasForeignKey("skillSetGuid");

                    b.Navigation("luPositionToApply");

                    b.Navigation("skillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("BillingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("OperatingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResource", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmergencyContact")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.DutyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchGuid");

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithOne("EmployeeOrganization")
                        .HasForeignKey("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("FamilyDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("Nationality")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeEntry")
                        .HasForeignKey("TimesheetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "Timesheet")
                        .WithMany()
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Navigation("BillingAddress");

                    b.Navigation("ClientContacts");

                    b.Navigation("CompanyContacts");

                    b.Navigation("OperatingAddress");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmergencyContact");

                    b.Navigation("EmployeeAddress");

                    b.Navigation("EmployeeOrganization");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Navigation("TimeEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
